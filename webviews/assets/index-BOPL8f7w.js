function u(a){const e=new Set;return a&&a.length>0&&a.flatMap(t=>t.sections||[]).flatMap(t=>t.changes).forEach(t=>{e.add(t.path)}),e}function g(a,e,t={},p=[],d=[]){const c=u(a),l=Array.from(c);l.length===0&&l.push(...e.map(n=>n.new_path||n.old_path).filter(Boolean));const r=l.every(n=>p.includes(n)),f=l.filter(n=>!p.includes(n)&&!d.includes(n)),i=[];return f.forEach(n=>{const s=a.flatMap(o=>o.sections||[]).flatMap(o=>o.changes).find(o=>o.path===n);if(s)i.push({path:n,originalCode:s.originalCode,newCode:t[n]||s.modifiedCode});else{const o=e.find(h=>(h.new_path||h.old_path)===n);o&&i.push({path:n,originalCode:o.old_contents||"",newCode:t[n]||o.new_contents||""})}}),{filesToApply:i,allPaths:l,areAllPathsApplied:r}}function C(a,e){a.length&&e&&a.forEach(t=>{e(t.path,t.originalCode,t.newCode)})}export{C as a,u as g,g as p};
